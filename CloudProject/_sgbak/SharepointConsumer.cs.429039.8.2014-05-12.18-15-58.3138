using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using HoucatonicCloudStorage_extensions;
using System.Xml;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.IO;
using Newtonsoft.Json.Linq;
using System.ServiceModel;
using System.Threading;

namespace HousatonicCloudStorage
{
    public class SharepointConsumer : CloudStorageConsumer
    {
		public Cookie FedAuth;
		public Cookie rtFa;

		public SharepointConsumer(){
			name = "SharePoint";
		}

        public override List<CloudItem> ListAllFiles(IEnumerable<string> fileExtensions)
        {
            throw new NotImplementedException();
        }

        public override List<CloudItem> ListFilesInFolder(string folderId, IEnumerable<string> fileExtensions)
        {
			string uri = null;
			if (folderId == getRootFolderId())
				uri = config.authorizeUri + "/_api/web/lists/?$select=Title,Files,Items&$filter=BaseType eq 1 and Hidden eq false and ItemCount gt 0";
			else
				uri = folderId;

			HttpWebRequest request = (HttpWebRequest)WebRequest.Create (uri);
			request.CookieContainer = new CookieContainer();
			request.CookieContainer.Add(new Uri("http://" + FedAuth.Domain), FedAuth);
			request.CookieContainer.Add(new Uri("http://" + rtFa.Domain), rtFa);
			request.Method = "GET";
			request.Accept = "application/json;odata=verbose";

            // CCB
            string json;
            using (WebResponse response = request.GetResponse())
            {
                json = new StreamReader(response.GetResponseStream()).ReadToEnd();
            }

			//string json = new StreamReader (request.GetResponse ().GetResponseStream ()).ReadToEnd ();
			JObject jObj = JObject.Parse (json);
			JArray array = null;
			List<CloudItem> ret = new List<CloudItem> ();

			array = jObj ["d"] ["results"] as JArray;
			foreach (JObject folder in array) {
				if (folderId == getRootFolderId ()) {
					ret.Add (new CloudItem () { 
						cloudConsumer = name,
						isFolder = true,
						Name = folder ["Title"].ToString (),
						Id = folder ["Files"] ["__deferred"] ["uri"].ToString () //+ "?$select=Url,ETag,TimeLastModified,LastModifiedBy"
					});
				} else {
					if (folder ["__metadata"] ["type"].ToString () == "MS.FileServices.File") {
						foreach (string ext in fileExtensions)
							if (folder ["Name"].ToString ().ToLower ().EndsWith (ext.ToLower ())) {
								ret.Add (new CloudItem () {
									Name = folder ["Name"].ToString (),
									Id = folder ["Url"].ToString(),
									UniqueId = config.authorizeUri + folder ["Url"],
									cloudConsumer = name,
									fileVersion = folder ["ETag"].ToString (),
									lastEdited = folder ["TimeLastModified"].ToString (),
									lastEditor = folder ["LastModifiedBy"] ["Name"].ToString (),
									FullPath = folder ["Url"].ToString ()
								});
								break;
							}
					} else if (folder ["__metadata"] ["type"].ToString () == "MS.FileServices.Folder" && folder ["ChildrenCount"].ToString () != "0") {
						ret.Add (new CloudItem () {
							cloudConsumer = name,
							isFolder = true,
							Name = folder ["Name"].ToString (),
							Id = folder ["Children"] ["__deferred"] ["uri"].ToString () + "?$select=Url,ETag,TimeLastModified,LastModifiedBy"
						});
					}
				}
			}

			return ret;
        }

        public override bool TokenIsOk()
        {
			if (FedAuth == null || rtFa == null)
				return false;
			try
			{
				HttpWebRequest request = (HttpWebRequest)WebRequest.Create(config.authorizeUri + "/_api/web/title");
				request.CookieContainer = new CookieContainer();
				request.CookieContainer.Add(new Uri("http://" + FedAuth.Domain), FedAuth);
				request.CookieContainer.Add(new Uri("http://" + rtFa.Domain), rtFa);
				request.Method = "GET";
				request.Accept = "application/json;odata=verbose";
				request.GetResponse();
			}
			catch (WebException ex)
			{
				FedAuth = null;
				rtFa = null;
				return false;
			}
			return true;
        }

        public override string getRootFolderId()
        {
			return "";
        }

        public override CloudItem SaveOverwriteDocument(System.IO.Stream content, string fileId, string contentType = null)
        {
			HttpWebRequest request = WebRequest.Create (config.authorizeUri + fileId) as HttpWebRequest;
			request.Method = "PUT";
			request.Headers ["Overwrite"] = "F";
			request.Accept = "*/*";
			request.ContentType = "multipart/form-data; charset=utf-8";
			request.CookieContainer = new CookieContainer ();
			request.CookieContainer.Add(new Uri("http://" + FedAuth.Domain), FedAuth);
			request.CookieContainer.Add(new Uri("http://" + rtFa.Domain), rtFa);
			request.Headers ["Accept-Language"] = "en-us";

			using (var str = request.GetRequestStream ()) {
				content.CopyTo (str);
			}

			var response = request.GetResponse ();
			var r = new StreamReader (response.GetResponseStream ()).ReadToEnd();

			return null;
        }

        public override CloudItem SaveCreateDocument(System.IO.Stream content, string fileName, string contentType = null, string folderId = null)
        {
            throw new NotImplementedException();
        }

        public override UserData GetUser()
        {
            throw new NotImplementedException();
        }

        public override CloudItem GetFileMetadata(string fileId)
		{
			HttpWebRequest request = (HttpWebRequest)WebRequest.Create (config.authorizeUri + "/_api/web/getFileByServerRelativeUrl('" + fileId + "')/ListItemAllFields/File");
			request.CookieContainer = new CookieContainer ();
			request.CookieContainer.Add (new Uri ("http://" + FedAuth.Domain), FedAuth);
			request.CookieContainer.Add (new Uri ("http://" + rtFa.Domain), rtFa);
			request.Method = "GET";
			request.Accept = "application/json;odata=verbose";
			var resp = request.GetResponse ();
			var r = new StreamReader (resp.GetResponseStream ()).ReadToEnd ();
			JObject jobj = JObject.Parse (r)["d"] as JObject;

			return new CloudItem () {
				Name = jobj ["Name"].ToString (),
				Id = fileId,
				UniqueId = config.authorizeUri + fileId,
				cloudConsumer = name,
				fileVersion = jobj ["ETag"].ToString (),
				lastEdited = jobj ["TimeLastModified"].ToString (),
				FullPath = fileId
			};
		}

        public override System.IO.Stream GetDocument(string fileId)
        {
			var request = (HttpWebRequest)WebRequest.Create(config.authorizeUri + fileId);
			request.Method = "GET";
			request.CookieContainer = new CookieContainer();
			request.CookieContainer.Add(new Uri("http://" + FedAuth.Domain), FedAuth);
			request.CookieContainer.Add(new Uri("http://" + rtFa.Domain), rtFa);
			return request.GetResponse().GetResponseStream();
        }

        public override bool HasPermissionToEditFile(string fileId)
		{
			HttpWebRequest request = (HttpWebRequest)WebRequest.Create (config.authorizeUri + "/_api/web/getFileByServerRelativeUrl('" + fileId + "')/ListItemAllFields/effectiveBasePermissions");
			request.CookieContainer = new CookieContainer ();
			request.CookieContainer.Add (new Uri ("http://" + FedAuth.Domain), FedAuth);
			request.CookieContainer.Add (new Uri ("http://" + rtFa.Domain), rtFa);
			request.Method = "GET";
			request.Accept = "application/json;odata=verbose";
			var resp = request.GetResponse ();
			var r = new StreamReader (resp.GetResponseStream ()).ReadToEnd ();
			JObject effectiveBasePermissions = JObject.Parse (r) ["d"]["EffectiveBasePermissions"] as JObject;
			UInt32 low = UInt32.Parse(effectiveBasePermissions["Low"].ToString());
			return (low | 4) == low;
		}

		public override string GenerateShareUrlParam (CloudItem item)
    	{
			return name + "://" + config.authorizeUri + ":/" + item.Id;
    	}

    	public override CloudItem GetCloudItemFromParam (string urlParam)
    	{
			if (!urlParam.StartsWith (name + "://"))
				return null;
			urlParam = urlParam.Substring (name.Length + 3);
			int aux = urlParam.IndexOf ("//");
			config.authorizeUri = urlParam.Substring (0, aux);

			return new CloudItem(){
				cloudConsumer =  name,
				Id = urlParam.Substring(aux + 3)
			};
    	}
    }
}
